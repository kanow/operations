<?php

declare(strict_types=1);

namespace Kanow\Operations\Tests\Unit\Domain\Model\Operation;

/***************************************************************
 *  Copyright notice
 *
 *  (c) 2013 Karsten Nowak <captnnowi@gmx.de>
 *
 *  All rights reserved
 *
 *  This script is part of the TYPO3 project. The TYPO3 project is
 *  free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/
use Kanow\Operations\Domain\Model\Operation;
use Kanow\Operations\Domain\Model\Type;
use TYPO3\CMS\Extbase\Domain\Model\FileReference;
use TYPO3\CMS\Extbase\DomainObject\AbstractEntity;
use TYPO3\CMS\Extbase\Persistence\ObjectStorage;
use TYPO3\TestingFramework\Core\Unit\UnitTestCase;
use PHPUnit\Framework\Attributes\Test;

/**
 * Test case for class \Kanow\Operations\Domain\Model\Operation.
 *
 * @version $Id$
 * @copyright Copyright belongs to the respective authors
 * @license http://www.gnu.org/licenses/gpl.html GNU General Public License, version 3 or later
 *
 *
 * @author Karsten Nowak <captnnowi@gmx.de>
 * @covers \Kanow\Operations\Domain\Model\Operation
 */
class OperationTest extends UnitTestCase
{
    private Operation $subject;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->subject = new Operation();
    }

    #[Test]
    public function isAbstractEntity(): void
    {
        self::assertInstanceOf(AbstractEntity::class, $this->subject);
    }

    #[Test]
    public function titleCanBeSet(): void
    {
        $value = 'This is an operation title';
        $this->subject->setTitle($value);
        self::assertEquals($value, $this->subject->getTitle());
    }

    #[Test]
    public function numberCanBeSet(): void
    {
        $value = '2023';
        $this->subject->setNumber($value);
        self::assertIsString($this->subject->getNumber());
        self::assertEquals($value, $this->subject->getNumber());
    }

    #[Test]
    public function onlyEldCanBeSet(): void
    {
        $value = 1;
        $this->subject->setOnlyEld($value);
        self::assertIsInt($this->subject->getOnlyEld());
        self::assertEquals($value, $this->subject->getOnlyEld());
    }

    #[Test]
    public function locationCanBeSet(): void
    {
        $value = 'My location';
        $this->subject->setLocation($value);
        self::assertEquals($value, $this->subject->getLocation());
    }

    #[Test]
    public function beginCanBeSet(): void
    {
        $value = new \DateTime();
        $this->subject->setBegin($value);
        self::assertEquals($value, $this->subject->getBegin());
    }

    #[Test]
    public function endCanBeSet(): void
    {
        $value = new \DateTime();
        $this->subject->setEnd($value);
        self::assertEquals($value, $this->subject->getEnd());
    }

    #[Test]
    public function teaserCanBeSet(): void
    {
        $value = 'This is an operation teaser';
        $this->subject->setTeaser($value);
        self::assertEquals($value, $this->subject->getTeaser());
    }

    #[Test]
    public function reportCanBeSet(): void
    {
        $value = 'This is an operation report';
        $this->subject->setReport($value);
        self::assertEquals($value, $this->subject->getReport());
    }

    #[Test]
    public function longitudeCanBeSet(): void
    {
        $value = '11.03773';
        $this->subject->setLongitude($value);
        self::assertEquals($value, $this->subject->getLongitude());
    }

    #[Test]
    public function latitudeCanBeSet(): void
    {
        $value = '51.75745';
        $this->subject->setLatitude($value);
        self::assertEquals($value, $this->subject->getLatitude());
    }

    #[Test]
    public function zoomCanBeSet(): void
    {
        $value = 15;
        $this->subject->setZoom($value);
        self::assertIsInt($this->subject->getZoom());
        self::assertEquals($value, $this->subject->getZoom());
    }

    #[Test]
    public function mediaCanBeSet(): void
    {
        $mediaItem = new FileReference();
        $media = new ObjectStorage();
        $media->attach($mediaItem);
        $this->subject->setMedia($media);
        self::assertSame($media, $this->subject->getMedia());
        self::assertSame($mediaItem, $this->subject->getFirstMedia());
    }

    #[Test]
    public function typeCanBeSet(): void
    {
        $type = new Type();
        $type->setTitle('Typ fire');

        $operationType = new ObjectStorage();
        $operationType->attach($type);

        $this->subject->setType($operationType);
        self::assertSame($operationType, $this->subject->getType());
    }
}
